
		<div class="col-lg-6">
			<h4>Solve your maze</h4>
			<div class="field">
				<div id="mazebuilder">
				</div>
				<%= f.hidden_field :layout, :value => @maze.layout %>
				<%= f.hidden_field :setting_id, :value => @maze.setting_id %>
				<%= f.hidden_field :main_character_id, :value => @maze.main_character_id %>
				<%= f.hidden_field :goal_id, :value => @maze.goal_id %>
				<%= f.hidden_field :start %>
				<%= f.hidden_field :end %>
				<%= f.hidden_field :startCoordinates %>
				<%= f.hidden_field :endCoordinates %>
				<!--input type="hidden" name="layout" id="layout" value="<%= render plain: @layout %>" ///-->
			</div>
		</div>
		<script>
		    function blocklyLoaded(blockly) {
		      // Called once Blockly is fully loaded.
		      window.Blockly = blockly;
		    }

			var instructions = [];

			function moveNorth()
			{
			  instructions.push('myMazeLayout.move("north")');
			}
			function moveEast()
			{
			  instructions.push('myMazeLayout.move("east")');

			}
			function moveSouth()
			{
			  instructions.push('myMazeLayout.move("south")');

			}
			function moveWest()
			{
			  instructions.push('myMazeLayout.move("west")');

			}

		    function runCode() {
				var code = Blockly.JavaScript.workspaceToCode();

		    	try {
				    eval(code);
				} catch (e) {
					// Null is thrown for infinite loop.
					// Otherwise, abnormal termination is a user error.
					if (e !== Infinity) {
					  alert(e);
					}
				}

				console.log("INSTRUCTIONS:");
				console.log("Length:" + instructions.length);

				for (var i=0;i<instructions.length;i++)
				{
					interval = 1000;
					step = i+1;
					//console.log(i + ":" + instructions[i]);
					/*setTimeout(
						function() {
							console.log("in timeout function:" + instructions[i])
						},
						(interval * step),
						instructions[i]
					)*/
					setTimeout('eval(instructions[' + i + '])',interval*step)
				}
		    }

		    function resetSolution() {
				Blockly.mainWorkspace.clear();
				coordinates = eval($("#maze_start").val());
				row = coordinates[0];
				col = coordinates[1];

				map = eval($("#maze_layout").val());
				console.log("[" + row + "," + col + "]");
				myMazeLayout.resetLayout(map,row,col);
				instructions = [];
		    }
		</script>
			<div class="col-lg-6">
				<iframe src="/static/blocklymaze" class="blockly col-lg-10" style="border:0 1px 1px 0;border-style:solid;border-color:#ddd;padding:0;height:400px;clear:both;float:left"></iframe>
				<div class="col-lg-2">
					<button type="button" class="maze-run btn btn-primary" onclick="runCode()">
						<%= image_tag "run.png", width:'50', height:'50' %>
					</button>
					<br /><br />
					<button type="button" class="maze-reset btn btn-default" onclick='resetSolution()'>
						<%= image_tag "reset.png", width:'50', height:'50' %>
					</button>
				</div>

			</div>

		<div style="display:none">
			<%= image_tag('cornstalk.png', {:id => 'setting', :onload => "console.log('loaded')"}) %>
				<%= image_tag('dog.png', {:id =>'maincharacter', :class => 'draggable'}) %>
				<%= image_tag('dog-bowl.png', {:id => 'goal', :class =>'draggable'}) %>
		</div>
		<script type="text/javascript">
			function preload(arrayOfImages) {
				$(arrayOfImages).each(function () {
			        $('<img />').attr('src',this).appendTo('body').css('display','none');
			    });
			}

			// Usage:
			preload(['<%= asset_path('dog.png') %>'],['<%= asset_path('cornstalk.png') %>'],['<%= asset_path('dog-bowl.png') %>']);

			function setStartCoordinates()
			{
				var coordinates = eval($("#maze_start").val());
				console.log(coordinates);

				var row = coordinates[0];
				var col = coordinates[1];

				rect = $("#mazebuilder .maze").offset()

				var x = rect.left + (col-1) * 75
				var y = rect.top + (row-1) * 75

				console.log("start coordinates: ")
				console.log($("#maincharacter").position())
				$("#maincharacter").parent().css({position: 'relative'});
				$("#maincharacter").css({
					top: x,
					left: y,
					position:'absolute'
				})
				console.log($("#maincharacter").position())

			}

			//$("#goal").draggable();

			//$("#mazebuilder").droppable({
			//	drop: function( event, ui ) {
		    //    saveCoordinates(this,event,ui)
		    //  }
			//});

	    </script>