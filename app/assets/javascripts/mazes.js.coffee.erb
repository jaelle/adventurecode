# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/
	
class @MazeLayout

	containerID: "maze_container"
	cellSize: 75
	numRows: 5
	numCols: 5
	map: "[[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]"
	setting: null
	maincharacter: null
	goal: null

	drawingContext: null

	constructor: (containerId,cellSize,numRows,numCols) ->

		# set default settings for this maze
		@containerID = containerId
		@cellSize = cellSize
		@numRows = numRows
		@numCols = numCols

	setMap: (map) ->

		@map = map
		console.log(map)

	setSetting: (setting_id) ->

		# get setting image path based on id
		@setting = new Image()
		@setting.src = "<%= asset_path('cornstalk.png') %>"
		@setting.width = @cellSize
		@setting.height = @cellSize

		return @setting
		# @setting = $('#setting')[0];


	setMainCharacter: (maincharacter_id, col, row) ->

		# get main character image path based on id
		@maincharacter = @placeMainCharacter(col,row,"<%= image_path('dog.png') %>")

	setGoal: (goal_id, col, row) ->

		#get goal image based on id
		@goal = @placeGoal(col,row,"<%= image_path('dog-bowl.png') %>")

	show: ->

		@createCanvas()
		@updateLayout()
	
	createCanvas: ->
		@canvas = document.createElement 'canvas'
		@canvas.className = 'maze'
		@canvas.height = @cellSize * @numRows
		@canvas.width = @cellSize * @numCols
		document.getElementById(@containerID).appendChild @canvas

		@drawingContext = @canvas.getContext '2d'

	drawCell: (cell) ->

		# get cell settings
		startX = cell.col * @cellSize
		startY = cell.row * @cellSize
		color = cell.color
		
		@drawingContext.strokeStyle = 'rgba(0, 0, 0, 1)'
		@drawingContext.strokeRect startX, startY, @cellSize, @cellSize
		
		if !cell.image?

			# display white or black tile
			if color == "white"
				fillStyle = 'rgb(255,255,255)'
			else
				fillStyle = 'rgb(0,0,0)'
			
			@drawingContext.fillStyle = fillStyle
			@drawingContext.fillRect startX, startY, @cellSize, @cellSize
		else 
			# display image on top of white tile
			fillStyle = 'rgb(255,255,255)'
			@drawingContext.fillStyle = fillStyle
			@drawingContext.fillRect startX, startY, @cellSize, @cellSize
			@drawingContext.drawImage cell.image, 0, 0, @cellSize, @cellSize, startX, startY, @cellSize, @cellSize 
	
	createCell: (col,row,color,image) ->
		col: col
		row: row 
		color: color
		image: image

	placeMainCharacter: (image,col,row) ->
		col: col
		row: row
		image: image
		color: "white"

	placeGoal: (image,col,row) ->
		col: col
		row: row
		image: image
		color: "white"

	updateLayout: () ->
		currentCell = []

		for row in [0..(@numRows-1)] by 1
			currentCell[row] = [] 

			for col in [0..(@numCols-1)] by 1

				# clear the tile before we do anything
				# clearCell = @createCell col,row,"white",null
				# @drawCell clearCell
				image = null

				# set the color and imagery for this tile
				if @map[row][col] == 1
					color = "white"
					
					# main character is setup
					if @maincharacter?
						if @maincharacter.col == col && @maincharacter.row == row 
							image = @maincharacter.image

					#goal is setup
					if @goal?
						if @goal.col == col && @goal.row == row 
							image = @goal.image
				else
					color = "black"

					if @setting?
						image = @setting

				currentCell[row][col] = @createCell(col,row,color,image)
				@drawCell currentCell[row][col]

	getEventRow: (event) ->
		rect = @canvas.getBoundingClientRect()
		y = event.clientY - rect.top
		row = Math.floor(y / @cellSize)

		return row

	getEventCol: (event) ->
		rect = @canvas.getBoundingClientRect()
		x = event.clientX - rect.left
		col = Math.floor(x / @cellSize)

		return col

	toggleColor: (col,row) ->

		if @map[row][col] == 1
			@map[row][col] = 0
		else
			@map[row][col] = 1

		@updateLayout()

	saveJSON: (field_id) ->
		$(field_id).val(JSON.stringify(@map))

	move: (direction) ->
		if direction == "north"
			new_col = @maincharacter.col;
			new_row = @maincharacter.row - 1
		else if direction == "east"
			new_col = @maincharacter.col + 1
			new_row = @maincharacter.row
		else if direction == "south"
			new_col = @maincharacter.col
			new_row = @maincharacter.row + 1
		else
			new_col = @maincharacter.col - 1
			new_row = @maincharacter.row

		newSquare = @map[new_row][new_col]

		# are we moving to an open tile?
		if (newSquare? && newSquare != 0)
			@maincharacter.row = new_row
			@maincharacter.col = new_col

			@updateLayout()

		else 
			alert('cant move ' + direction)

		# main character made it to the goal
		if (@maincharacter.col == @goal.col && @maincharacter.row == @goal.row)
			alert("Success!")