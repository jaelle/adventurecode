# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

$(window).load ->

	if $("#maze_layout").val() == ""
		@myMazeLayout = new MazeLayout('mazebuilder',"",50,5,5,"new")
		@myMazeLayout.updateJSON('#maze_layout')
	else 
		setting_img = $("#setting")[0];
		goal_img = $("#goal")[0];
		maincharacter_img = $("#maincharacter")[0];
		console.log("num images loaded: " + $(".preloader").length);
		if $("#maze_layout")[0] && ($(".preloader").length > 0)?

			$("#setting").hide()

			@myMazeLayout = new MazeLayout('mazebuilder',JSON.parse($("#maze_layout").val()),50,5,5,"new")
			@myMazeLayout.updateSetting(setting_img)

			if $("#maze_start").val()?
				coordinates = eval($("#maze_start").val())
				col = coordinates[0]
				row = coordinates[1]

				@myMazeLayout.updateMainCharacter(maincharacter_img,col,row)


			if $("#maze_end").val()?
				coordinates = eval($("#maze_end").val())
				col = coordinates[0]
				row = coordinates[1]

				@myMazeLayout.updateGoal(goal_img,col,row)

			# @myMazeLayout.placeEndpoints(maincharacter_img,goal_img)


	$(document).on 'click', '',  (event) ->

		if event.type == "touchstart"
			@myMazeLayout.touchToggleColor(event)
		else

			if (!$("#maze_start")[0]?)
				# @myMazeLayout.toggleColor(event)
				map = JSON.parse($("#maze_layout").val())

				rect = $("#mazebuilder .maze")[0].getBoundingClientRect()
				x = event.clientX - rect.left
				y = event.clientY - rect.top
			
				#which cell is this?
				col = Math.floor(x / 50)
				row = Math.floor(y / 50)

				console.log("col:" + col + " " + "row:" + row + " " + map[0][1])

				# we aren't clicking on the right thing
				if col <= 5 && row <= 5
					console.log("huh...")
					
					if map[row][col] == 1
						map[row][col] = 0
					else
						map[row][col] = 1

					$("#maze_layout").val(JSON.stringify(map))
					$("#mazebuilder .maze").remove()
					@myMazeLayout = new MazeLayout('mazebuilder',JSON.parse($("#maze_layout").val()),50,5,5,"new")
			

	$(".mazelayout").on 'click', (event) ->
		#console.log()
		$("#maze_layout").val(this.children[0].value)
		$("#mazebuilder .maze").remove()
		@myMazeLayout = new MazeLayout('mazebuilder',JSON.parse($("#maze_layout").val()),50,5,5,"new")
	
class @MazeLayout
	currentCell: null
	numCols: 5
	numRows: 5
	cellSize: 50
	canvas: null
	drawingContext: null
	layoutmap: null
	containerID: null
	type: null
	maincharacter: null 
	goal: null
	maincharacter_x: null
	maincharacter_y: null
	goal_x: null
	goal_y: null
	setting_img: null

	constructor: (containerID,map,cellSize,nrows,ncols,type) ->

		if map != "" 
			# import existing map
			@numCols = map.length
			@numRows = map[0].length

			@layoutmap = map

		else 
			@layoutmap = []

			@numRows = nrows;
			@numCols = ncols;

		@cellSize = cellSize;

		@containerID = containerID;

		@createCanvas()
		@createDrawingContext()
		
		@drawingContext.fillRect 0, 0, @cellSize, @cellSize
		@currentCell = []

		@type = type

		console.log("num cols: " + @numCols)
		console.log("num rows: " + @numRows)
		
		for row in [0..(@numRows-1)] by 1
			@currentCell[row] = [] 
			
			if map == ""
				@layoutmap[row] = []

			for col in [0..(@numCols-1)] by 1

				# alert(@map[row][col] + " " + row + ", " + col)
				if map != ""
					if map[row][col] == 1
						color = "white"
					else
						color = "black"
				else 
					color = "white"
					@layoutmap[row][col] = 1

				@currentCell[row][col] = @createCell(row,col,color,null)
				@drawCell @currentCell[row][col]

	
	createCanvas: ->
		@canvas = document.createElement 'canvas'
		@canvas.className = 'maze'
		@canvas.height = @cellSize * @numRows
		@canvas.width = @cellSize * @numCols
		document.getElementById(@containerID).appendChild @canvas

	createDrawingContext: ->
		@drawingContext = @canvas.getContext '2d'

	drawCell: (cell) ->
		x = cell.col * @cellSize
		y = cell.row * @cellSize
		color = cell.color
		
		@drawingContext.strokeStyle = 'rgba(0, 0, 0, 1)'
		@drawingContext.strokeRect x, y, @cellSize, @cellSize
		
		#console.log('x:' + x + ', y:' + y + ', image:' + cell.image + ', color:' + color)
		if !cell.image?
			if color == "white"
				fillStyle = 'rgb(255,255,255)'
			else
				fillStyle = 'rgb(0,0,0)'
			
			#console.log(fillStyle)
			@drawingContext.fillStyle = fillStyle
			@drawingContext.fillRect x, y, @cellSize, @cellSize
		else 
			# pattern = @drawingContext.createPattern(cell.image, "repeat")
			# @drawingContext.fillStyle = pattern
			# @drawingContext.fillRect x, y, @cellSize, @cellSize

			@drawingContext.drawImage cell.image, 0, 0, @cellSize, @cellSize, x, y, @cellSize, @cellSize 



	createCell: (row,col,color,image) ->
		row: row 
		col: col
		color: color
		image: image

	toggleColor: (event) ->

		@toggle(event.clientX, event.clientY)

	touchToggleColor: (event) ->

		touch = event.originalEvent.targetTouches[0];

		@toggle(touch.pageX,touch.pageY)

	toggle: (clientX,clientY) ->

		rect = @canvas.getBoundingClientRect()
		x = clientX - rect.left
		y = clientY - rect.top
	
		#which cell is this?
		col = Math.floor(x / 50)
		row = Math.floor(y / 50)
		
		cell = @currentCell[row][col]

		if cell.color == "black"
			cell.color = "white"
			@layoutmap[row][col] = 1
		else
			cell.color = "black"
			@layoutmap[row][col] = 0

		
		# cell = @myMaze.createCell(row,col)
		@drawCell cell
	
	updateJSON: (map_id) ->
		console.log(map_id)
		console.log(JSON.stringify(@layoutmap))
		console.log("")
		$(map_id).val(JSON.stringify(@layoutmap))
		console.log($(map_id).val())

	updateSetting: (image) ->
		console.log("Updating setting to " + image)
		@setting_img = image

		for row in [0..(@numRows-1)] by 1

			for col in [0..(@numCols-1)] by 1
				if @layoutmap[row][col] == 1
					color = "white"
					@setting_img = null
				else
					color = "black"
					@setting_img = image

				@currentCell[row][col] = @createCell(row,col,color,@setting_img)
				@drawCell @currentCell[row][col]

	updateMainCharacter: (maincharacter,col,row) ->
		# find the first white cell and place main character
		console.log(@maincharacter)

		if @maincharacter?
			@clearCell = @createCell(@maincharacter_x,@maincharacter_y,"white",null)
			console.log("Clearing cell " + @maincharacter_x + "," + @maincharacter_y)
			console.log(@clearCell)
			@drawCell @clearCell

		@maincharacter = maincharacter 
		@maincharacter_x = col
		@maincharacter_y = row

		@startCell = @createCell(row,col,"white",maincharacter)
		@drawCell @startCell


	updateGoal: (goal,col,row) ->
		# find the first white cell and place main character
		@goal = goal 
		@goal_x = col
		@goal_y = row

		@startCell = @createCell(row,col,"white",goal)
		@drawCell @startCell

	move: (direction) ->
		if direction == "north"
			new_x = @maincharacter_x;
			new_y = @maincharacter_y - 1
		else if direction == "east"
			new_x = @maincharacter_x + 1
			new_y = @maincharacter_y;
		else if direction == "south"
			new_x = @maincharacter_x;
			new_y = @maincharacter_y + 1
		else
			new_x = @maincharacter_x - 1
			new_y = @maincharacter_y

		if (new_x == @goal_x && new_y == @goal_y)
			alert("Success!")
		else
			newSquare = @layoutmap[new_x][new_y]
			if (newSquare? && newSquare != 0)
				@maincharacter_x = new_x
				@maincharacter_y = new_y

				map = eval($("#maze_layout").val())

				@resetLayout(map,new_x,new_y)
			else 
				alert('cant move ' + direction)

	resetLayout: (map,x,y) ->

		@drawingContext.clearRect(0, 0, @canvas.width, @canvas.height);

		@numCols = map.length
		@numRows = map[0].length
		console.log(map)
		console.log("cols:" + @numCols)
		console.log("rows:" + @numRows)

		@layoutmap = map

		for row in [0..(@numRows-1)] by 1
			@currentCell[row] = [] 
			
			if map == ""
				@layoutmap[row] = []

			for col in [0..(@numCols-1)] by 1

				# alert(@map[row][col] + " " + row + ", " + col)
				if map != ""
					if map[row][col] == 1
						color = "white"
					else
						color = "black"
				else 
					color = "white"
					@layoutmap[row][col] = 1

				@currentCell[row][col] = @createCell(row,col,color,null)
				@drawCell @currentCell[row][col]

		@updateSetting(@setting_img)
		@updateMainCharacter(@maincharacter,x,y)
		@updateGoal(@goal,@goal_x,@goal_y)