// Generated by CoffeeScript 1.9.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Maze = (function() {
    Maze.maze = null;

    Maze.map = null;

    Maze.is_map = false;

    Maze.white = null;

    Maze.black = null;

    Maze.drawing_context = null;

    function Maze(_at_container_id, _at_num_cols, _at_num_rows, _at_is_map) {
      this.container_id = _at_container_id;
      this.num_cols = _at_num_cols;
      this.num_rows = _at_num_rows;
      this.is_map = _at_is_map;
      this._initBehavior = __bind(this._initBehavior, this);
      this.resize_handler = __bind(this.resize_handler, this);
      this._initBehavior();
      this.maze = $(this.container_id);
      this.cell_size = this.maze.width() / this.num_cols;
      this.white = 0;
      this.black = 1;
      this.map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      this.maze;
    }

    Maze.prototype.resize_handler = function(event) {
      this.cell_size = this.maze.width() / this.num_cols;
      this.update();
      return false;
    };

    Maze.prototype._initBehavior = function() {
      return $(window).resize(this.resize_handler);
    };

    Maze.prototype.create = function() {
      this.canvas = $("<canvas>");
      if (this.is_map) {
        this.canvas[0].className = "maze_map";
      } else {
        this.canvas[0].className = "maze";
      }
      this.resize_canvas();
      this.maze.append(this.canvas[0]);
      this.drawing_context = this.canvas[0].getContext('2d');
      this.update_cells();
      return this.canvas;
    };

    Maze.prototype.random_map = function() {
      var i, _i;
      for (i = _i = 0; _i < 25; i = _i += 1) {
        this.map[i] = Math.floor(Math.random() * 2);
      }
      this.update();
      return this.map;
    };

    Maze.prototype.load_map = function(map) {
      this.map = JSON.parse(map);
      return this.update();
    };

    Maze.prototype.resize_canvas = function() {
      this.canvas[0].width = this.cell_size * this.num_cols;
      return this.canvas[0].height = this.cell_size * this.num_rows;
    };

    Maze.prototype.update_cells = function() {
      var col, color, count, current_cell, row, _i, _ref, _results;
      count = 0;
      current_cell = [];
      _results = [];
      for (row = _i = 0, _ref = this.num_rows; _i < _ref; row = _i += 1) {
        current_cell[row] = [];
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.num_cols; _j < _ref1; col = _j += 1) {
            color = this.map[count];
            current_cell[row][col] = this.create_cell(col, row, this.map[count]);
            this.draw_cell(current_cell[row][col]);
            _results1.push(count++);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Maze.prototype.create_cell = function(col, row, color) {
      return {
        col: col,
        row: row,
        color: color
      };
    };

    Maze.prototype.draw_cell = function(cell) {
      var x, y;
      x = cell.col * this.cell_size;
      y = cell.row * this.cell_size;
      this.drawing_context.strokeStyle = "rgba(0,0,0,1)";
      this.drawing_context.strokeRect(x, y, this.cell_size, this.cell_size);
      if (cell.color === this.white) {
        this.drawing_context.fillStyle = "rgb(255,255,255)";
      } else {
        this.drawing_context.fillStyle = "rgb(0,0,0)";
      }
      return this.drawing_context.fillRect(x, y, this.cell_size, this.cell_size);
    };

    Maze.prototype.clear_canvas = function() {
      this.drawing_context.fillStyle = "rgb(255,255,255)";
      return this.drawing_context.fillRect(0, 0, this.canvas[0].width, this.canvas[0].height);
    };

    Maze.prototype.update = function() {
      this.resize_canvas();
      this.clear_canvas();
      return this.update_cells();
    };

    Maze.prototype.toggle_cell = function(event) {
      var col, index, rect, row, x, y;
      rect = this.canvas[0].getBoundingClientRect();
      y = event.clientY - rect.top;
      row = Math.floor(y / this.cell_size);
      x = event.clientX - rect.left;
      col = Math.floor(x / this.cell_size);
      index = this.index(row, col);
      if (this.map[index] === this.black) {
        this.map[index] = this.white;
      } else {
        this.map[index] = this.black;
      }
      return this.update();
    };

    Maze.prototype.index = function(row, col) {
      var index;
      return index = row * this.num_cols + col;
    };

    Maze.prototype.setting = function(image_path) {
      return console.log(image_path);
    };

    Maze.prototype.character = function(image_path) {
      return console.log(image_path);
    };

    Maze.prototype.goal = function(image_path) {
      return console.log(image_path);
    };

    Maze.prototype.place_draggable_character = function() {
      return console.log("Placing draggable character at first available blank space");
    };

    Maze.prototype.place_draggable_goal = function() {
      return console.log("Placing draggable goal at last available blank space");
    };

    return Maze;

  })();

  window.display_maze = function() {
    var maze_map;
    window.maze = new Maze("#mazebuilder", 5, 5, false);
    window.maze_canvas = maze.create();
    maze_map = $("#mazebuilder_map");
    maze_map.val("[" + maze.map + "]");
    maze_canvas.on("click", function(event) {
      maze.toggle_cell(event);
      return maze_map.val("[" + maze.map + "]");
    });
    return maze;
  };

  window.load_page = function(path) {
    if (path !== "null") {
      return location.href = path;
    }
  };

  window.init = function(page) {
    var blockly_panel, map_array, maze;
    switch (page) {
      case "/step2":
        display_map_defaults("#mazebuilder_maps");
        map_array = $("#mazebuilder_map00 input").val();
        break;
      case "/step3":
        blockly_panel = new BlocklyPanel("#blockly", "#mazebuilder");
        map_array = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]";
    }
    switch (page) {
      case "/step2":
      case "/step3":
        maze = display_maze();
        maze.setting('images/corn.png');
        maze.character('images/dog.png');
        maze.goal('images/dogbowl.png');
        maze.load_map(map_array);
        maze.place_draggable_goal();
        return maze.place_draggable_character();
      default:
        return maze = display_maze();
    }
  };

}).call(this);
